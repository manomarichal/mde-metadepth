// if (x.isDefined())

operation Machine process() {}

operation Segment pass() {
  if (self.next.isDefined()) {
    if (self.next.recieve(self.item)) {
    ('passing ' + self.item + 'from ' + self.name).println();
    self.item = null;
    }
  }
}

operation Segment recieve(item) {
  if (self.item.isUndefined() and item.isDefined()) {
    ('recieving ' + item + ' at ' + self.name).println();
    self.item = item;
    return true;
  }
  return false;
}

operation Assembler recieve(item) {
  if (item.isTypeOf(Sphere) and self.sphere.isUndefined()) {
  ('recieving sphere ' + item + ' at ' + self.name).println();
    self.sphere = item;
    return true;
  }
  else if (item.isTypeOf(Cube) and self.cube.isUndefined()) {
  ('recieving cube ' + item + 'at ' + self.name).println();
    self.cube = item;
    return true;
  }
  else {
  return false;
  }
}

// PROCESS FUNCTIONS
operation ArrivalSphere process() {
  if (self.item.isUndefined()){
    self.item = new Sphere();
    (self.name + ' created ' + self.item).println();
  }
}

operation ArrivalCube process() {
  if (self.item.isUndefined()){
    self.item = new Cube();
    (self.name + ' created ' + self.item).println();
  }
}

operation Incinerator process() {
  if (self.item.isDefined()){
    (self.name + ' destroying ' + self.item).println();

    self.item = null;
  }
}

operation Assembler process() {
  if (self.sphere.isDefined() and self.cube.isDefined()){
    self.item = new Assembled();
    (self + ' combined cube: ' + self.sphere + ' and sphere: ' + self.cube + ' into assembled: ' + self.item).println();
    self.sphere = null;
    self.cube = null;
  }
}



operation main() {
  var step : Integer := 0;

  while (step < 10)
  {
      ('===== Step: ' + step + ' =====').println();

      for (m: Machine in Machine.all()) {
        m.process();
      }

      for (s: Segment in Segment.all()) {
        s.pass();
      }

      step := step + 1;
  }
}
