// PASS FUNCTIONS
operation Segment pass() {
  if (self.item.isDefined() and self.next.isDefined()) {
    if (self.next.recieve(self.item)) {
      (self.name + ' passed ' + self.item + ' to ' + self.next.name).println();
      self.item = null;
    }
  }
}

operation Join pass() {
  if (self.item.isDefined() and self.next.isDefined()) {
    if (self.next.recieve(self.item)) {
      (self.name + ' passed ' + self.item + ' to ' + self.next.name).println();
      self.item = self.queue;
      self.queue = null;
    }
  }
}

operation Split pass() {
  if (self.item.isDefined()) {
    if (self.left) {
      if (self.next_left.isDefined() and self.next_left.recieve(self.item)) {
        (self.name + ' passed ' + self.item + ' to ' + self.next_left.name).println();
        self.item = null;
      }
    }
    else {
      if (self.next_right.isDefined() and self.next_right.recieve(self.item)) {
        (self.name + ' passed ' + self.item + ' to ' + self.next_right.name).println();
        self.item = null;
      }
    }
  }
}

operation Inspection pass() {
  if (self.item.isDefined()) {
    if (self.decision = 0 and self.next_accept.isDefined() and self.next_accept.recieve(self.item)) {
      (self.name + ' decision on ' + self.item + 'is "destroy" and passed it to ' + self.next_accept.name).println();
    }
    else if (self.decision = 1 and self.next_fix.isDefined() and self.next_fix.recieve(self.item)) {
      (self.name + ' decision on ' + self.item + 'is "fix" and passed it to ' + self.next_fix.name).println();
    }
    else if (self.decision = 2 and self.next_destroy.isDefined() and self.next_destroy.recieve(self.item)) {
      (self.name + ' decision on ' + self.item + 'is "destroy" and passed it to ' + self.next_destroy.name).println();
    }
  }
}

//RECIEVE FUNCTIONS
operation Segment recieve(item) {
  if (self.item.isUndefined()) {
    self.item = item;
    return true;
  }
  else {
    return false;
  }
}

operation Join recieve(item) {
  if (self.item.isUndefined()) {
    self.item = item;
    return true;
  }
  else if (self.queue.isUndefined()) {
    self.queue = item;
    return true;
  }
  else {
    return false;
  }
}


operation Assembler recieve(item) {
  if (item.isTypeOf(Sphere) and self.sphere.isUndefined()) {
    self.sphere = item;
    return true;
  }
  else if (item.isTypeOf(Cube) and self.cube.isUndefined()) {
    self.cube = item;
    return true;
  }
  else {
    return false;
  }
}


// PROCESS FUNCTIONS
operation Machine process() {}

operation ArrivalSphere process() {
  if (self.item.isUndefined()) {
    self.item = new Sphere();
    (self.name + ' created ' + self.item).println();
  }
}

operation ArrivalCube process() {
  if (self.item.isUndefined()) {
    self.item = new Cube();
    (self + ' created ' + self.item).println();
  }
}

operation Inspection process() {
  var numbers : Sequence = Sequence {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  var number: Integer = numbers.random();

  if (self.item.isDefined()) {
    if (number < 7) {
      self.decision = 0;
    }
    else if (number < 9) {
      self.decision = 1;
    }
    else {
      self.decision = 2;
    }
  }
}

operation Incinerator process() {
  if (self.item.isDefined()) {
    (self.name + ' destroying ' + self.item).println();
    self.item = null;
  }
}

operation Loading process() {
  if (self.item.isDefined()) {
    (self.name + ' storing ' + self.store.size() + 'th item: ' + self.item).println();
    self.store.add(self.item);
    self.item = null;
  }
}

operation Assembler process() {
  if (self.sphere.isDefined() and self.cube.isDefined()){
    self.item = new AssembledItem();

    (self + ' combined cube: ' + self.sphere + ' and sphere: ' + self.cube + ' into assembled: ' + self.item).println();

    self.sphere = null;
    self.cube = null;
  }
}

operation Operator step() {
  if (self.timetable.time = 0) {
    var curr_index := self.timetable.index;
    var next_index := self.timetable.index + 1;
    if (next_index = self.timetable.machine.size()) {
      next_index = 0;
    }

    var curr_machine := Machine.all().selectOne(m|m.name = self.timetable.machine.at(curr_index));
    var next_machine := Machine.all().selectOne(m|m.name = self.timetable.machine.at(next_index));

    if (next_machine.operator.isUndefined()) {
      curr_machine.operator = null;
      next_machine.operator = self;

      self.timetable.index = next_index;
      self.timetable.time = self.timetable.duration.at(self.timetable.index);

      (self.name + ' is moving to ' + next_machine.name).println();
    }
    else {
      (self.name + ' waiting for ' + next_machine.name).println();
    }
  }
  else {
    (self.name + ' is working on ' + self.timetable.machine.at(self.timetable.index) + ' for ' + self.timetable.time + ' steps').println();
    self.timetable.time = self.timetable.time - 1;

    Machine.all().selectOne(m|m.name = self.timetable.machine.at(self.timetable.index)).process();
  }
}



operation main() {
  var step : Integer = 0;
  var quota : Integer = 0;

  while (quota < 3)
  {
      ('===== Step: ' + step + ' =====').println();

      for (o: Operator in Operator.all()){
        o.step();
      }

      for (s: Segment in Segment.all()) {
        s.pass();
      }

      step = step + 1;

      quota = 0;
      for (l: Loading in Loading.all()) {
        quota = quota + l.store.size();
      }
  }
}
