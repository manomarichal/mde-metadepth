Model Schedule {
  Node Timetable {
    operator : String;
    machine : String[1..*];
    duration : String[1..*];
    index : int = 0;
    time : int = 0;
    constraint_sync : $self.machine.size() = self.duration.size()$
  }
}

Model Factory imports Schedule {

  Node Operator {
    name : String{id};
    timetable : Timetable;
    constraint_match : $self.name = self.timetable.operator$
  }

  abstract Node Item {}
  Node Cube : Item {}
  Node Sphere : Item {}
  Node AssembledItem : Item {
    cube : Cube[0..1];
    sphere : Sphere[0..1];
  }

  abstract Node Segment {
    name : String{id};
    next : Segment[0..1];
    item : Item[0..1];
    store : Item[*];
  }

  abstract Node Machine : Segment {
    operator : Operator[0..1];
    constraint_name : $self.name.matches("[A-Z][a-z]*[0-9]*")$
  }
  Node ArrivalCube : Machine {}
  Node ArrivalSphere : Machine {}
  Node Assembler : Machine {
    cube : Cube[0..1];
    sphere : Sphere[0..1];
  }
  Node Inspection : Machine {
    next_accept : Segment;
    next_fix : Segment;
    next_destroy : Segment;
    decision: int[0..1];
  }
  Node Fixer : Machine {}
  Node Loading : Machine {}
  Node Incinerator : Machine {}

  abstract Node Conveyor : Segment {}
  Node Straight : Conveyor {}
  Node Split : Conveyor {
    left : boolean = true;
    next_left : Segment;
    next_right: Segment;
  }
  Node Join : Conveyor {
    queue : Item[0..1];
  }

  constraint_alloperated : $Operator.collect(o | o.timetable).collect(t | t.machine).asSet().size() = Machine.collect(m | m.name).asSet().size()$
}

Factory factory {
  Timetable t1 {
    operator = "Ege";
    machine = ["Arrivalcube", "Arrivalsphere", "Assembler", "Inspection"];
    duration = [2, 1, 3, 4];
  }
  Timetable t2 {
    operator = "Mano";
    machine = ["Inspection", "Fixer", "Loading", "Incinerator"];
    duration = [1, 1, 1, 2];
  }

  Operator w1 {
    name = "Ege";
    timetable = t1;
  }
  Operator w2 {
    name = "Mano";
    timetable = t2;
  }

  ArrivalCube arrivalCube {
    name = "Arrivalcube";
    next = straight1;
  }
  ArrivalSphere arrivalSphere {
    name = "Arrivalsphere";
    next = straight2;
  }
  Assembler assembler {
    name = "Assembler";
    next = join;
  }
  Inspection inspection {
    name = "Inspection";
    next_fix = straight3;
    next_accept = straight5;
    next_destroy = incinerator;
  }
  Fixer fixer {
    name = "Fixer";
    next = straight4;
  }
  Loading loading {
    name = "Loading";
  }
  Incinerator incinerator {
    name = "Incinerator";
  }

  Straight straight1 {name = "Straight 1"; next = assembler;}
  Straight straight2 {name = "Straight 2"; next = assembler;}
  Straight straight3 {name = "Straight 3"; next = fixer;}
  Straight straight4 {name = "Straight 4"; next = join;}
  Straight straight5 {name = "Straight 5"; next = loading;}

  Join join {name = "Join 1"; next = inspection;}
}
